import Anthropic from "@anthropic-ai/sdk";

const anthropic = new Anthropic({
  apiKey: process.env.CLAUDE_API_KEY,
});

export async function checkClaudeConnection() {
  try {
    if (!process.env.CLAUDE_API_KEY) {
      return {
        isWorking: false,
        error: "Claude API key is not configured",
        status: "no_api_key",
      };
    }

    console.log("üîç Checking Claude API connection...");

    const testMessage = await anthropic.messages.create({
      model: "claude-3-5-sonnet-20241022",
      max_tokens: 5,
      temperature: 0,
      messages: [
        {
          role: "user",
          content: "Hello",
        },
      ],
    });

    if (testMessage && testMessage.content && testMessage.content[0]) {
      console.log("‚úÖ Claude API is working properly");
      return {
        isWorking: true,
        status: "connected",
        model: "claude-3-5-sonnet-20241022",
        timestamp: new Date().toISOString(),
      };
    } else {
      console.log("‚ùå Claude API returned invalid response");
      return {
        isWorking: false,
        error: "Invalid response from Claude API",
        status: "invalid_response",
      };
    }
  } catch (error) {
    console.log("‚ùå Claude API connection failed:", error.message);
    return {
      isWorking: false,
      error: error.message,
      status: "connection_failed",
      errorCode: error.code || "unknown",
    };
  }
}

export async function generateLiquidWithClaude(
  htmlContent,
  fileName,
  repeatPrompt = 7
) {
  try {
    if (!process.env.CLAUDE_API_KEY) {
      throw new Error("Claude API key is not configured");
    }

    let promptBase = `You are an expert Shopify Liquid developer with deep knowledge of Shopify's theming system, Liquid syntax, and schema structure. Convert the following HTML into a comprehensive Shopify section with advanced schema configuration:

HTML Content:
${htmlContent}

DETAILED REQUIREMENTS:
1. Convert ALL HTML elements to proper Shopify Liquid syntax
2. Create comprehensive schema with BOTH settings and blocks
3. Make ALL text content editable through schema settings
4. Section name should be: ${fileName}

OUTPUT FORMAT:
Return ONLY the complete Shopify Liquid template code with schema. No explanations, no markdown formatting, just clean Liquid code ready for production use.`;

    // Repeat the prompt as many times as specified
    let prompt = "";
    for (let i = 0; i < repeatPrompt; i++) {
      prompt += promptBase + "\n";
    }

    const completion = await anthropic.messages.create({
      model: "claude-3-5-sonnet-20241022",
      max_tokens: 8192,
      temperature: 0.1,
      messages: [
        {
          role: "user",
          content: prompt,
        },
      ],
    });

    const liquidContent = completion.content[0]?.text?.trim();

    if (!liquidContent) {
      throw new Error("No content generated by Claude");
    }

    const schemaMatch = liquidContent.match(
      /\{\%\s*schema\s*\%\}([\s\S]*?)\{\%\s*endschema\s*\%\}/
    );
    let jsonSchema = {};

    if (schemaMatch) {
      try {
        jsonSchema = JSON.parse(schemaMatch[1].trim());
      } catch (e) {
        console.warn("Could not parse schema from Claude response:", e.message);
      }
    }

    console.log(
      `üßÆ Claude Token Usage: Input = ${
        completion.usage?.input_tokens || 0
      }, Output = ${completion.usage?.output_tokens || 0}, Total = ${
        (completion.usage?.input_tokens || 0) + (completion.usage?.output_tokens || 0)
      }`
    );

    return {
      success: true,
      liquidContent: liquidContent,
      jsonTemplate: JSON.stringify(jsonSchema, null, 2),
      metadata: {
        generatedAt: new Date().toISOString(),
        model: "claude-3-5-sonnet-20241022",
        inputTokens: completion.usage?.input_tokens || 0,
        outputTokens: completion.usage?.output_tokens || 0,
        totalTokens: (completion.usage?.input_tokens || 0) + (completion.usage?.output_tokens || 0),
      },
    };
  } catch (error) {
    console.error("Claude conversion error:", error);
    return {
      success: false,
      error: error.message,
      liquidContent: "",
      jsonTemplate: "{}",
      metadata: {
        generatedAt: new Date().toISOString(),
        error: error.message,
      },
    };
  }
}

export async function generateLiquidWithClaudeBackground(
  htmlContent,
  fileName
) {
  try {
    if (!process.env.CLAUDE_API_KEY) {
      console.log(
        `‚ö†Ô∏è [BACKGROUND] Claude API key not configured - skipping AI generation for: ${fileName}`
      );
      return {
        success: false,
        error: "Claude API key not configured",
        fileName: fileName,
        skipped: true,
      };
    }

    console.log(`ü§ñ [BACKGROUND] Starting Claude conversion for: ${fileName}`);
    const startTime = Date.now();

    generateLiquidWithClaude(htmlContent, fileName)
      .then((result) => {
        const duration = Date.now() - startTime;
        if (result.success) {
          console.log(
            `‚úÖ [BACKGROUND] Claude conversion completed for: ${fileName} (${duration}ms)`
          );
          console.log(
            `üìä [BACKGROUND] Claude Usage - Tokens: ${result.metadata.totalTokens}, Model: ${result.metadata.model}`
          );
          console.log(
            `üìè [BACKGROUND] Generated ${
              result.liquidContent.split("\n").length
            } lines of Liquid code`
          );
          console.log(
            `[TOKENS] Input: ${result.metadata.inputTokens}, Output: ${result.metadata.outputTokens}, Total: ${result.metadata.totalTokens}`
          );
        } else {
          console.log(
            `‚ùå [BACKGROUND] Claude conversion failed for: ${fileName} (${duration}ms):`,
            result.error
          );
        }
      })
      .catch((error) => {
        const duration = Date.now() - startTime;
        console.log(
          `‚ùå [BACKGROUND] Claude conversion error for: ${fileName} (${duration}ms):`,
          error.message
        );
      });

    return {
      success: true,
      message: "Claude conversion started in background",
      timestamp: new Date().toISOString(),
      fileName: fileName,
    };
  } catch (error) {
    console.error("Background Claude conversion setup error:", error);
    return {
      success: false,
      error: error.message,
      fileName: fileName,
    };
  }
}
