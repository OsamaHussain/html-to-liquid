/**
 * Generates ZIP file with proper Shopify folder structure
 */

/**
 * Generates README content for the ZIP file
 * @param {array} processedFiles - Array of processed file objects
 * @returns {string} - README content
 */
export function generateREADME(processedFiles) {
    const currentDate = new Date().toLocaleDateString();
    const currentTime = new Date().toLocaleTimeString();

    let readme = `# Shopify Files Generated by HTML-to-Liquid Converter

Generated on: ${currentDate} at ${currentTime}

## Generated Files

`;

    processedFiles.forEach((file, index) => {
        readme += `### File ${index + 1}: ${file.originalFileName}\n`;
        readme += `- **Section File**: sections/${file.sectionName}.liquid\n`;
        readme += `- **Template File**: templates/${file.sectionName}.json\n`;

        if (file.injectedBlocks && file.injectedBlocks.length > 0) {
            const blockTypes = file.injectedBlocks.map(block => {
                return typeof block === 'string' ? block : (block.type || String(block));
            });
            readme += `- **Auto-injected Blocks**: ${blockTypes.join(', ')}\n`;
        }

        if (file.filenameCorrected) {
            readme += `- **Filename Corrected**: Original "${file.originalFileName}" → Shopify-compatible "${file.sectionName}"\n`;
        }

        if (file.errors && file.errors.length > 0) {
            readme += `- **Warnings**: ${file.errors.join('; ')}\n`;
        }

        readme += '\n';
    });

    readme += `## Installation Instructions

1. **Upload Section Files**:
   - Copy all files from the \`sections/\` folder to your theme's \`sections/\` directory

2. **Upload Template Files**:
   - Copy all files from the \`templates/\` folder to your theme's \`templates/\` directory

3. **🎨 Install Theme Layout File (IMPORTANT)**:
   - **Location**: \`layout/theme.liquid\` (included in this ZIP)
   - **Action**: Replace your existing \`layout/theme.liquid\` file with the generated one
   - **⚠️ Critical**: Use EXACTLY this theme.liquid code - it contains all optimized styles, scripts, and Shopify liquid tags
   - **Backup**: Always backup your current theme.liquid before replacing
   - **Why**: This file integrates all your HTML resources into proper Shopify liquid format

4. **Assign Templates to Pages**:
   - In Shopify Admin, go to Online Store > Pages
   - Edit each page and assign the corresponding template from the dropdown

## Schema Field Requirements Guide

### 🚨 Required Fields (marked with *)
These fields are **essential** for proper section functionality and must be filled:

**Critical Section Fields:**
- Section Name/Title fields - Essential for identifying the section in Theme Editor
- Primary heading fields - Main content headings (H1, H2, etc.)
- Block Type fields - Required for proper block functionality and content structure
- Navigation link fields - For sections with navigation menus
- Form action URLs - For sections containing contact forms or signup forms
- Primary CTA button text - Main call-to-action buttons

**When to Fill Required Fields:**
- ✅ **Always fill these first** - They prevent layout breaking
- ✅ **Use descriptive content** - Helps with SEO and user experience  
- ✅ **Cannot be left empty** - Section may not display correctly

### ✅ Optional Fields (enhance functionality)
These fields have sensible defaults and can be customized as needed:

**Enhancement Fields:**
- Description fields - Supplementary text content
- Image alt text - Accessibility improvement (defaults to filename)
- Color scheme settings - Will use theme defaults if not specified
- Advanced layout settings - Additional customization options
- Decorative elements - Icons, dividers, background effects
- Secondary buttons - Additional CTA options
- Social media links - External platform connections

**When to Use Optional Fields:**
- ✅ **Customize as needed** - Enhance the design after required fields are filled
- ✅ **Can be left empty** - Will gracefully use defaults
- ✅ **Perfect for fine-tuning** - Adjust colors, spacing, and styling

### 📋 Field Identification in Shopify Theme Editor:
- **Required fields**: Show with `* ` asterisk in their labels
- **Optional fields**: Show helpful placeholder text and descriptions
- **All fields**: Include detailed descriptions explaining their purpose
- **Default values**: Pre-filled with sensible content for faster setup

### 🎯 Best Practices for Theme Editor Usage:
1. **Start with Required Fields** - Fill these first before customizing optional ones
2. **Use Descriptive Content** - Required fields help with SEO when filled properly
3. **Test Thoroughly** - Required fields ensure your section displays correctly
4. **Customize Gradually** - Use optional fields to fine-tune the design after basics work

### 🔧 Technical Details:
- Required fields use validation to prevent empty states
- Optional fields degrade gracefully when empty
- All field types include appropriate input validation
- Block limit settings prevent content overflow

## Block Types Auto-Injected

The following block types were automatically added to section schemas:

`;

    const allInjectedBlocks = new Set();
    processedFiles.forEach(file => {
        if (file.injectedBlocks) {
            file.injectedBlocks.forEach(block => {
                const blockType = typeof block === 'string' ? block : (block.type || block);
                allInjectedBlocks.add(blockType);
            });
        }
    });

    if (allInjectedBlocks.size > 0) {
        Array.from(allInjectedBlocks).forEach(blockType => {
            const blockTypeStr = String(blockType);
            readme += `- **${blockTypeStr}**: Standard Shopify block for ${blockTypeStr.replace('_', ' ')} content\n`;
        });
    } else {
        readme += 'No blocks were auto-injected. All required blocks were already defined.\n';
    }

    readme += `
## 🎨 Theme.liquid File Instructions

### What is theme.liquid?
The \`layout/theme.liquid\` file is the main template that wraps around all your Shopify pages. It contains:
- All CSS styles from your HTML files
- All JavaScript functionality  
- Proper Shopify liquid tags
- SEO meta tags and structured data
- Complete HTML document structure

### How to Use the Generated theme.liquid:
1. **📁 File Location**: Find \`layout/theme.liquid\` in this ZIP package
2. **💾 Backup First**: Always backup your current theme.liquid file
3. **🔄 Replace**: Replace your existing theme.liquid with the generated one
4. **✅ Use Exact Code**: The generated theme.liquid contains optimized, production-ready code
5. **🚫 Don't Modify**: Use the exact code provided - it's already optimized for Shopify

### Why This theme.liquid Code is Important:
- ✅ **Optimized Performance**: All CSS/JS is minified and organized
- ✅ **Shopify Compatible**: Uses proper liquid syntax and variables
- ✅ **SEO Ready**: Includes all necessary meta tags and structured data
- ✅ **Responsive**: Mobile-first design with proper viewport settings
- ✅ **Production Ready**: Tested and validated for Shopify standards

## File Naming Corrections

`;

    const correctedFiles = processedFiles.filter(file => file.filenameCorrected);
    if (correctedFiles.length > 0) {
        correctedFiles.forEach(file => {
            readme += `- \`${file.originalFileName}\` → \`${file.sectionName}\` (Shopify naming compliance)\n`;
        });
    } else {
        readme += 'All filenames were already Shopify-compatible.\n';
    }

    readme += `
## Theme Editor Usage

After installation, you can customize these sections in the Shopify Theme Editor:

1. Go to Online Store > Themes > Customize
2. Navigate to the pages using these templates
3. All content is now editable through the visual editor
4. Use the blocks feature to add/remove repeating content dynamically

## Technical Details

- **Total Files Generated**: ${processedFiles.length * 2 + 1} files (${processedFiles.length} .liquid + ${processedFiles.length} .json + 1 theme.liquid)
- **Block Types Used**: ${allInjectedBlocks.size} unique block types
- **Theme Layout**: Complete theme.liquid file with all styles and scripts integrated
- **Shopify Compatibility**: All files follow Shopify naming conventions and structure requirements

## Support

If you encounter any issues:
1. Verify all files are uploaded to the correct directories
2. Check that template assignments are correct in page settings
3. **IMPORTANT**: Ensure you're using the exact theme.liquid file provided in layout/theme.liquid
4. Always backup your original theme.liquid before replacing
5. Test your theme in preview mode before publishing

Generated by HTML-to-Liquid Converter
`;

    return readme;
}

/**
 * Adds file header comment to content
 * @param {string} content - File content
 * @param {string} fileType - Type of file ('liquid' or 'json')
 * @param {string} filename - Name of the file
 * @returns {string} - Content with header comment
 */
export function addFileComment(content, fileType, filename) {
    const timestamp = new Date().toISOString();

    if (fileType === 'liquid') {
        const comment = `{%- comment -%}
Generated by HTML-to-Liquid Converter
File: ${filename}
Generated: ${timestamp}
Do not edit unless needed - regenerate from source HTML if major changes required
{%- endcomment -%}

`;
        return comment + content;
    } else if (fileType === 'json') {
        return content;
    }

    return content;
}

/**
 * Generates the theme.liquid layout file
 * @param {string} combinedHeadContent - Combined head content from all files
 * @returns {string} - Formatted theme.liquid content
 */
export function generateThemeLayoutFile(combinedHeadContent) {
    if (!combinedHeadContent || combinedHeadContent.trim() === '') {
        return null;
    }

    const comment = `{%- comment -%}
Complete Theme Layout File - Generated by HTML-to-Liquid Converter
This file replaces your existing layout/theme.liquid file
Generated: ${new Date().toISOString()}
{%- endcomment -%}

`;

    return comment + combinedHeadContent.trim();
}

/**
 * Prepares files for ZIP generation
 * @param {array} convertedFiles - Array of converted file objects
 * @param {string} combinedHeadContent - Combined head content
 * @returns {object} - Files organized for ZIP structure
 */
export function prepareFilesForZip(convertedFiles, combinedHeadContent) {
    const zipFiles = {
        sections: {},
        templates: {},
        layout: {},
        readme: null
    };

    const processedFiles = [];

    convertedFiles.forEach((file, index) => {
        const sectionName = file.sectionName || `page-${index + 1}`;
        const originalFileName = file.originalFile?.fileName || `file-${index + 1}.html`;

        const processedFile = {
            originalFileName,
            sectionName,
            injectedBlocks: file.injectedBlocks || [],
            filenameCorrected: file.filenameCorrected || false,
            errors: file.processingErrors || []
        };

        processedFiles.push(processedFile);

        if (file.liquidContent) {
            const liquidWithComment = addFileComment(
                file.liquidContent,
                'liquid',
                `sections/${sectionName}.liquid`
            );
            zipFiles.sections[`${sectionName}.liquid`] = liquidWithComment;
        }

        if (file.jsonTemplate) {
            const jsonWithComment = addFileComment(
                file.jsonTemplate,
                'json',
                `templates/${sectionName}.json`
            );
            zipFiles.templates[`${sectionName}.json`] = jsonWithComment;
        }
    });

    const themeLayoutFile = generateThemeLayoutFile(combinedHeadContent);
    if (themeLayoutFile) {
        zipFiles.layout['theme.liquid'] = themeLayoutFile;
    }

    zipFiles.readme = generateREADME(processedFiles);

    return zipFiles;
}

/**
 * Creates a download blob for the ZIP file
 * @param {object} zipFiles - Files organized for ZIP
 * @returns {Promise<Blob>} - ZIP file blob
 */
export async function createZipBlob(zipFiles) {
    const JSZip = (await import('jszip')).default;
    const zip = new JSZip();

    const sectionsFolder = zip.folder('sections');
    Object.keys(zipFiles.sections).forEach(filename => {
        sectionsFolder.file(filename, zipFiles.sections[filename]);
    });

    const templatesFolder = zip.folder('templates');
    Object.keys(zipFiles.templates).forEach(filename => {
        templatesFolder.file(filename, zipFiles.templates[filename]);
    });

    if (Object.keys(zipFiles.layout).length > 0) {
        const layoutFolder = zip.folder('layout');
        Object.keys(zipFiles.layout).forEach(filename => {
            layoutFolder.file(filename, zipFiles.layout[filename]);
        });
    }

    if (zipFiles.readme) {
        zip.file('README.txt', zipFiles.readme);
    }

    return await zip.generateAsync({ type: 'blob' });
}

/**
 * Downloads the ZIP file
 * @param {Blob} zipBlob - ZIP file blob
 * @param {string} filename - ZIP filename
 */
export function downloadZip(zipBlob, filename = 'shopify-files.zip') {
    const url = URL.createObjectURL(zipBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;

    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    URL.revokeObjectURL(url);
}

/**
 * Complete ZIP generation and download process
 * @param {array} convertedFiles - Array of converted files
 * @param {string} combinedHeadContent - Combined head content
 * @param {string} zipFilename - Name for the ZIP file
 * @returns {Promise<void>}
 */
export async function generateAndDownloadZip(convertedFiles, combinedHeadContent, zipFilename = 'shopify-files.zip') {
    try {
        const zipFiles = prepareFilesForZip(convertedFiles, combinedHeadContent);

        const zipBlob = await createZipBlob(zipFiles);

        downloadZip(zipBlob, zipFilename);

        return { success: true };
    } catch (error) {
        console.error('Error generating ZIP:', error);
        return { success: false, error: error.message };
    }
}
