import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function checkOpenAIConnection() {
  try {
    if (!process.env.OPENAI_API_KEY) {
      return {
        isWorking: false,
        error: "OpenAI API key is not configured",
        status: "no_api_key",
      };
    }

    console.log("üîç Checking OpenAI API connection...");

    const testCompletion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: "Hello",
        },
      ],
      max_tokens: 5,
      temperature: 0,
    });

    if (testCompletion && testCompletion.choices && testCompletion.choices[0]) {
      console.log("‚úÖ OpenAI API is working properly");
      return {
        isWorking: true,
        status: "connected",
        model: "gpt-4o",
        timestamp: new Date().toISOString(),
      };
    } else {
      console.log("‚ùå OpenAI API returned invalid response");
      return {
        isWorking: false,
        error: "Invalid response from OpenAI API",
        status: "invalid_response",
      };
    }
  } catch (error) {
    console.log("‚ùå OpenAI API connection failed:", error.message);
    return {
      isWorking: false,
      error: error.message,
      status: "connection_failed",
      errorCode: error.code || "unknown",
    };
  }
}

export async function generateLiquidWithOpenAI(htmlContent, fileName) {
  try {
    if (!process.env.OPENAI_API_KEY) {
      throw new Error("OpenAI API key is not configured");
    }

    const prompt = `You are an expert Shopify Liquid developer with deep knowledge of Shopify's theming system, Liquid syntax, and schema structure. Convert the following HTML into a comprehensive Shopify section with advanced schema configuration:

HTML Content:
${htmlContent}

DETAILED REQUIREMENTS:
1. Convert ALL HTML elements to proper Shopify Liquid syntax
2. Create comprehensive schema with BOTH settings and blocks
3. Make ALL text content editable through schema settings
4. Convert ALL images to image picker fields with alt text options
5. Convert ALL links to URL picker fields with text customization
6. Create reusable blocks for repeated content (testimonials, features, FAQs, etc.)
7. Add color picker settings for all color values
8. Add font picker settings for typography
9. Include spacing/padding controls where applicable
10. Add toggle settings for show/hide functionality
11. Ensure responsive design preservation
12. Include proper section structure with {% stylesheet %} and <script> tags if needed
13. Add comprehensive presets with realistic default content
14. Section name should be: ${fileName}
15. Use semantic and descriptive setting IDs and labels
16. Include helpful setting descriptions for theme editor users
17. Optimize for performance and SEO
18. Follow Shopify's latest best practices and conventions
19. Include proper error handling for missing content
20. Add conditional rendering where appropriate

SCHEMA STRUCTURE REQUIREMENTS:
- Detailed section settings for global options
- Multiple block types for different content sections
- Proper setting types: text, textarea, richtext, image_picker, url, color, font_picker, checkbox, select, range
- Meaningful setting groups and info fields
- Comprehensive presets with multiple variations
- Proper limit settings for blocks
- Semantic setting IDs following kebab-case convention

OUTPUT FORMAT:
Return ONLY the complete Shopify Liquid template code with schema. No explanations, no markdown formatting, just clean Liquid code ready for production use.`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content:
            "You are a world-class Shopify Liquid developer and theme expert. You have extensive experience building production-ready Shopify themes and understand all nuances of Liquid syntax, schema configuration, and Shopify's theming best practices. Generate only the highest quality, most comprehensive Liquid templates with advanced schema structures.",
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      max_tokens: 16384,
      temperature: 0.1,
    });

    const liquidContent = completion.choices[0]?.message?.content?.trim();

    if (!liquidContent) {
      throw new Error("No content generated by OpenAI");
    }

    const schemaMatch = liquidContent.match(
      /\{\%\s*schema\s*\%\}([\s\S]*?)\{\%\s*endschema\s*\%\}/
    );
    let jsonSchema = {};

    if (schemaMatch) {
      try {
        jsonSchema = JSON.parse(schemaMatch[1].trim());
      } catch (e) {
        console.warn("Could not parse schema from OpenAI response:", e.message);
      }
    }

    console.log(
      `üßÆ OpenAI Token Usage: Prompt = ${
        completion.usage?.prompt_tokens || 0
      }, Completion = ${completion.usage?.completion_tokens || 0}, Total = ${
        completion.usage?.total_tokens || 0
      }`
    );

    return {
      success: true,
      liquidContent: liquidContent,
      jsonTemplate: JSON.stringify(jsonSchema, null, 2),
      metadata: {
        generatedAt: new Date().toISOString(),
        model: "gpt-4o",
        promptTokens: completion.usage?.prompt_tokens || 0,
        completionTokens: completion.usage?.completion_tokens || 0,
        totalTokens: completion.usage?.total_tokens || 0,
      },
    };
  } catch (error) {
    console.error("OpenAI conversion error:", error);
    return {
      success: false,
      error: error.message,
      liquidContent: "",
      jsonTemplate: "{}",
      metadata: {
        generatedAt: new Date().toISOString(),
        error: error.message,
      },
    };
  }
}

export async function generateLiquidWithOpenAIBackground(
  htmlContent,
  fileName
) {
  try {
    if (!process.env.OPENAI_API_KEY) {
      console.log(
        `‚ö†Ô∏è [BACKGROUND] OpenAI API key not configured - skipping AI generation for: ${fileName}`
      );
      return {
        success: false,
        error: "OpenAI API key not configured",
        fileName: fileName,
        skipped: true,
      };
    }

    console.log(`ü§ñ [BACKGROUND] Starting OpenAI conversion for: ${fileName}`);
    const startTime = Date.now();

    generateLiquidWithOpenAI(htmlContent, fileName)
      .then((result) => {
        const duration = Date.now() - startTime;
        if (result.success) {
          console.log(
            `‚úÖ [BACKGROUND] OpenAI conversion completed for: ${fileName} (${duration}ms)`
          );
          console.log(
            `üìä [BACKGROUND] OpenAI Usage - Tokens: ${result.metadata.totalTokens}, Model: ${result.metadata.model}`
          );
          console.log(
            `üìè [BACKGROUND] Generated ${
              result.liquidContent.split("\n").length
            } lines of Liquid code`
          );
          console.log(
            `[TOKENS] Prompt: ${result.metadata.promptTokens}, Completion: ${result.metadata.completionTokens}, Total: ${result.metadata.totalTokens}`
          );
        } else {
          console.log(
            `‚ùå [BACKGROUND] OpenAI conversion failed for: ${fileName} (${duration}ms):`,
            result.error
          );
        }
      })
      .catch((error) => {
        const duration = Date.now() - startTime;
        console.log(
          `‚ùå [BACKGROUND] OpenAI conversion error for: ${fileName} (${duration}ms):`,
          error.message
        );
      });

    return {
      success: true,
      message: "OpenAI conversion started in background",
      timestamp: new Date().toISOString(),
      fileName: fileName,
    };
  } catch (error) {
    console.error("Background OpenAI conversion setup error:", error);
    return {
      success: false,
      error: error.message,
      fileName: fileName,
    };
  }
}
